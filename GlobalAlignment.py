#Protein Scoring Scheme:
BLOSUM80 = {
           'A':{'A':5,'R':-2,'N':-2,'D':-2,'C':-1,'Q':-1,'E':-1,'G':0,'H':-2,'I':-2,'L':-2,'K':-1,'M':-1,'F':-3,'P':-1,'S':1,'T':0,'W':-3,'Y':-2,'V':0,'B':-2,'J':-2,'Z':-1,'X':-1,'*':-6},
           'R':{'A':-2,'R':6,'N':-1,'D':-2,'C':-4,'Q':1,'E':-1,'G':-3,'H':0,'I':-3,'L':-3,'K':2,'M':-2,'F':-4,'P':-2,'S':-1,'T':-1,'W':-4,'Y':-3,'V':-3,'B':-1,'J':-3,'Z':0,'X':-1,'*':-6},
           'N':{'A':-2,'R':-1,'N':6,'D':1,'C':-3,'Q':0,'E':-1,'G':-1,'H':0,'I':-4,'L':-4,'K':0,'M':-3,'F':-4,'P':-3,'S':0,'T':0,'W':-4,'Y':-3,'V':-4,'B':5,'J':-4,'Z':0,'X':-1,'*':-6},
           'D':{'A':-2,'R':-2,'N':1,'D':6,'C':-4,'Q':-1,'E':1,'G':-2,'H':-2,'I':-4,'L':-5,'K':-1,'M':-4,'F':-4,'P':-2,'S':-1,'T':-1,'W':-6,'Y':-4,'V':-4,'B':5,'J':-5,'Z':1,'X':-1,'*':-6},
           'C':{'A':-1,'R':-4,'N':-3,'D':-4,'C':9,'Q':-4,'E':-5,'G':-4,'H':-4,'I':-2,'L':-2,'K':-4,'M':-2,'F':-3,'P':-4,'S':-2,'T':-1,'W':-3,'Y':-3,'V':-1,'B':-4,'J':-2,'Z':-4,'X':-1,'*':-6},
           'Q':{'A':-1,'R':1,'N':0,'D':-1,'C':-4,'Q':6,'E':2,'G':-2,'H':1,'I':-3,'L':-3,'K':1,'M':0,'F':-4,'P':-2,'S':0,'T':-1,'W':-3,'Y':-2,'V':-3,'B':0,'J':-3,'Z':4,'X':-1,'*':-6},
           'E':{'A':-1,'R':-1,'N':-1,'D':1,'C':-5,'Q':2,'E':6,'G':-3,'H':0,'I':-4,'L':-4,'K':1,'M':-2,'F':-4,'P':-2,'S':0,'T':-1,'W':-4,'Y':-3,'V':-3,'B':1,'J':-4,'Z':5,'X':-1,'*':-6},
           'G':{'A':0,'R':-3,'N':-1,'D':-2,'C':-4,'Q':-2,'E':-3,'G':6,'H':-3,'I':-5,'L':-4,'K':-2,'M':-4,'F':-4,'P':-3,'S':-1,'T':-2,'W':-4,'Y':-4,'V':-4,'B':-1,'J':-5,'Z':-3,'X':-1,'*':-6},
           'H':{'A':-2,'R':0,'N':0,'D':-2,'C':-4,'Q':1,'E':0,'G':-3,'H':8,'I':-4,'L':-3,'K':-1,'M':-2,'F':-2,'P':-3,'S':-1,'T':-2,'W':-3,'Y':2,'V':-4,'B':-1,'J':-4,'Z':0,'X':-1,'*':-6},
           'I':{'A':-2,'R':-3,'N':-4,'D':-4,'C':-2,'Q':-3,'E':-4,'G':-5,'H':-4,'I':5,'L':1,'K':-3,'M':1,'F':-1,'P':-4,'S':-3,'T':-1,'W':-3,'Y':-2,'V':3,'B':-4,'J':3,'Z':-4,'X':-1,'*':-6},
           'L':{'A':-2,'R':-3,'N':-4,'D':-5,'C':-2,'Q':-3,'E':-4,'G':-4,'H':-3,'I':1,'L':4,'K':-3,'M':2,'F':0,'P':-3,'S':-3,'T':-2,'W':-2,'Y':-2,'V':1,'B':-4,'J':3,'Z':-3,'X':-1,'*':-6},
           'K':{'A':-1,'R':2,'N':0,'D':-1,'C':-4,'Q':1,'E':1,'G':-2,'H':-1,'I':-3,'L':-3,'K':5,'M':-2,'F':-4,'P':-1,'S':-1,'T':-1,'W':-4,'Y':-3,'V':-3,'B':-1,'J':-3,'Z':1,'X':-1,'*':-6},
           'M':{'A':-1,'R':-2,'N':-3,'D':-4,'C':-2,'Q':0,'E':-2,'G':-4,'H':-2,'I':1,'L':2,'K':-2,'M':6,'F':0,'P':-3,'S':-2,'T':-1,'W':-2,'Y':-2,'V':1,'B':-3,'J':2,'Z':-1,'X':-1,'*':-6},
           'F':{'A':-3,'R':-4,'N':-4,'D':-4,'C':-3,'Q':-4,'E':-4,'G':-4,'H':-2,'I':-1,'L':0,'K':-4,'M':0,'F':6,'P':-4,'S':-3,'T':-2,'W':0,'Y':3,'V':-1,'B':-4,'J':0,'Z':-4,'X':-1,'*':-6},
           'P':{'A':-1,'R':-2,'N':-3,'D':-2,'C':-4,'Q':-2,'E':-2,'G':-3,'H':-3,'I':-4,'L':-3,'K':-1,'M':-3,'F':-4,'P':8,'S':-1,'T':-2,'W':-5,'Y':-4,'V':-3,'B':-2,'J':-4,'Z':-2,'X':-1,'*':-6},
           'S':{'A':1,'R':-1,'N':0,'D':-1,'C':-2,'Q':0,'E':0,'G':-1,'H':-1,'I':-3,'L':-3,'K':-1,'M':-2,'F':-3,'P':-1,'S':5,'T':1,'W':-4,'Y':-2,'V':-2,'B':0,'J':-3,'Z':0,'X':-1,'*':-6},
           'T':{'A':0,'R':-1,'N':0,'D':-1,'C':-1,'Q':-1,'E':-1,'G':-2,'H':-2,'I':-1,'L':-2,'K':-1,'M':-1,'F':-2,'P':-2,'S':1,'T':5,'W':-4,'Y':-2,'V':0,'B':-1,'J':-1,'Z':-1,'X':-1,'*':-6},
           'W':{'A':-3,'R':-4,'N':-4,'D':-6,'C':-3,'Q':-3,'E':-4,'G':-4,'H':-3,'I':-3,'L':-2,'K':-4,'M':-2,'F':0,'P':-5,'S':-4,'T':-4,'W':11,'Y':2,'V':-3,'B':-5,'J':-3,'Z':-3,'X':-1,'*':-6},
           'Y':{'A':-2,'R':-3,'N':-3,'D':-4,'C':-3,'Q':-2,'E':-3,'G':-4,'H':2,'I':-2,'L':-2,'K':-3,'M':-2,'F':3,'P':-4,'S':-2,'T':-2,'W':2,'Y':7,'V':-2,'B':-3,'J':-2,'Z':-3,'X':-1,'*':-6},
           'V':{'A':0,'R':-3,'N':-4,'D':-4,'C':-1,'Q':-3,'E':-3,'G':-4,'H':-4,'I':3,'L':1,'K':-3,'M':1,'F':-1,'P':-3,'S':-2,'T':0,'W':-3,'Y':-2,'V':4,'B':-4,'J':2,'Z':-3,'X':-1,'*':-6},
           'B':{'A':-2,'R':-1,'N':5,'D':5,'C':-4,'Q':0,'E':1,'G':-1,'H':-1,'I':-4,'L':-4,'K':-1,'M':-3,'F':-4,'P':-2,'S':0,'T':-1,'W':-5,'Y':-3,'V':-4,'B':5,'J':-4,'Z':0,'X':-1,'*':-6},
           'J':{'A':-2,'R':-3,'N':-4,'D':-5,'C':-2,'Q':-3,'E':-4,'G':-5,'H':-4,'I':3,'L':3,'K':-3,'M':2,'F':0,'P':-4,'S':-3,'T':-1,'W':-3,'Y':-2,'V':2,'B':-4,'J':3,'Z':-3,'X':-1,'*':-6},
           'Z':{'A':-1,'R':0,'N':0,'D':1,'C':-4,'Q':4,'E':5,'G':-3,'H':0,'I':-4,'L':-3,'K':1,'M':-1,'F':-4,'P':-2,'S':0,'T':-1,'W':-3,'Y':-3,'V':-3,'B':0,'J':-3,'Z':5,'X':-1,'*':-6},
           'X':{'A':-1,'R':-1,'N':-1,'D':-1,'C':-1,'Q':-1,'E':-1,'G':-1,'H':-1,'I':-1,'L':-1,'K':-1,'M':-1,'F':-1,'P':-1,'S':-1,'T':-1,'W':-1,'Y':-1,'V':-1,'B':-1,'J':-1,'Z':-1,'X':-1,'*':-6},
           '*':{'A':-6,'R':-6,'N':-6,'D':-6,'C':-6,'Q':-6,'E':-6,'G':-6,'H':-6,'I':-6,'L':-6,'K':-6,'M':-6,'F':-6,'P':-6,'S':-6,'T':-6,'W':-6,'Y':-6,'V':-6,'B':-6,'J':-6,'Z':-6,'X':-6,'*':1},
}

#DNA Scoring Scheme:
matchScore = 1
mismatchScore = -1
gapPenalty = -1

## m is responsible for column length (length of first string )
## n is responsible for row length (length of second string )
## We'll iterate row by row

def ga(X, Y, case):
    "Perform Global Alignment using Dynamic Programming"
    m=len(X)
    n=len(Y)
    L = [[0 for x in range(m+1)] for y in range(n+1)]

    #initialization and filling:
    for i in range (n+1):
        L[i][0]=-i
    for j in range (m+1):
        L[0][j] =-j
        
    for i in range(1,n+1,1):
        for j in range(1,m+1,1):
            if case == 'D':
                if X[j-1] == Y[i-1]:
                    score = matchScore
                else :
                    score = mismatchScore
            elif case == 'P':
                score=BLOSUM80[X[j-1]][Y[i-1]]
            L[i][j] = max(L[i-1][j] + gapPenalty, L[i][j-1] + gapPenalty , L[i-1][j-1]+score)

            
    #print alignment score:
    print(L[n][m])

    #traceback:
    GAFirst =""
    GASecond=""
    GAMatch=""
    i = n
    j = m
    while i > 0 and j > 0:
        up = L[i-1][j]-1
        left=L[i][j-1]-1
        if  X[j-1]==Y[i-1]:
            score=1
        else :
            score=-1
        diagonal = L[i-1][j-1]+score
        if L[i][j]==diagonal:
            GAFirst+=X[j-1]
            GASecond+=Y[i-1]
            if score==1:
                GAMatch+="|"
            else:
                GAMatch+=" "
            i-=1
            j-=1
        elif L[i][j] == up:
            GAFirst+="-"
            GAMatch+=" "
            GASecond+=Y[i-1]
            i-=1
        else:
            GAFirst+=X[j-1]
            GASecond+="-"
            GAMatch+=" "
            j-=1

    while (i>0):
        GAFirst+="-"
        GASecond+=Y[i-1]
        GAMatch+=" "
        i-=1
    while(j>0):
        GAFirst+=X[j-1]
        GASecond+="-"
        GAMatch+=" "
        j-=1
        
    GAFirst=GAFirst[::-1]
    GAMatch=GAMatch[::-1]
    GASecond=GASecond[::-1]
    
    print (GAFirst)
    print(GAMatch)
    print(GASecond)
 
# Main:
#test case 1:
X = "ACGC"
Y = "GACTAC"
print ("Case 1:")
ga(X, Y , 'D')

#test case 2:
X = "AAACCGTGAGTTATTCGTTCTAGAA"
Y = "CACCCCTAAGGTACCTTTGGTTC"
print ("Case 2:")
ga(X, Y , 'D')

#test case 3:
X = "MRHIAHTQRCLSRLTSLVALLLIVLPMVFSPAHSC"
Y = "MDRDSLPRVPDTHGDVVDEKLFSDLYIRTSWVDA"
print ("Case 3:")
ga(X, Y , 'P')
